class Solution {
public:
    int findmaxlim(int i,int buy,vector<int>&prices,int cap,vector<vector<vector<int>>>&dp){
        int n=prices.size();
        if(i==n) return 0;
        if(cap==0) return 0;
        if(dp[i][buy][cap]!=-1) return dp[i][buy][cap];
      int profit=0;
        if(buy){
          profit=max(-prices[i]+findmaxlim(i+1,0,prices,cap,dp),findmaxlim(i+1,1,prices,cap,dp));
        }
        else{
            profit=max(prices[i]+findmaxlim(i+1,1,prices,cap-1,dp),findmaxlim(i+1,0,prices,cap,dp));
        }
        return dp[i][buy][cap]=profit;
    }
    int maxProfit(vector<int>& prices) {
        int n=prices.size();
        vector<vector<vector<int>>>dp(n,vector<vector<int>>(2,vector<int>(3,-1)));
        return findmaxlim(0,1,prices,2,dp);
    }
};

optimal solution
int maxProfit(vector<int>& prices)
{
    // Write your code here.
    vector<vector<int>>prev(2,vector<int>(3,0));
    vector<vector<int>>curr(2,vector<int>(3,0));
    
    for(int i=prices.size()-1;i>=0;i--){
        for(int j=0;j<=1;j++){
            for(int z=1;z<=2;z++){
                if(j==1){
                    curr[j][z]=max(prev[0][z]-prices[i],prev[1][z]);
                }
                else{
                    curr[j][z]=max(prev[1][z-1]+prices[i],prev[0][z]);
                }
            }
            prev=curr;
        }
    }
    return prev[1][2];
}
